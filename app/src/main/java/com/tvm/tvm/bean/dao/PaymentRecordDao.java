package com.tvm.tvm.bean.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.tvm.tvm.bean.PaymentRecord;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PAYMENT_RECORD".
*/
public class PaymentRecordDao extends AbstractDao<PaymentRecord, Long> {

    public static final String TABLENAME = "PAYMENT_RECORD";

    /**
     * Properties of entity PaymentRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Amount = new Property(1, int.class, "amount", false, "AMOUNT");
        public final static Property Num = new Property(2, int.class, "num", false, "NUM");
        public final static Property Type = new Property(3, int.class, "type", false, "TYPE");
        public final static Property PayTime = new Property(4, java.util.Date.class, "payTime", false, "PAY_TIME");
    }


    public PaymentRecordDao(DaoConfig config) {
        super(config);
    }
    
    public PaymentRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PAYMENT_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"AMOUNT\" INTEGER NOT NULL ," + // 1: amount
                "\"NUM\" INTEGER NOT NULL ," + // 2: num
                "\"TYPE\" INTEGER NOT NULL ," + // 3: type
                "\"PAY_TIME\" INTEGER);"); // 4: payTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PAYMENT_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, PaymentRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getAmount());
        stmt.bindLong(3, entity.getNum());
        stmt.bindLong(4, entity.getType());
 
        java.util.Date payTime = entity.getPayTime();
        if (payTime != null) {
            stmt.bindLong(5, payTime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, PaymentRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getAmount());
        stmt.bindLong(3, entity.getNum());
        stmt.bindLong(4, entity.getType());
 
        java.util.Date payTime = entity.getPayTime();
        if (payTime != null) {
            stmt.bindLong(5, payTime.getTime());
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public PaymentRecord readEntity(Cursor cursor, int offset) {
        PaymentRecord entity = new PaymentRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // amount
            cursor.getInt(offset + 2), // num
            cursor.getInt(offset + 3), // type
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)) // payTime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, PaymentRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAmount(cursor.getInt(offset + 1));
        entity.setNum(cursor.getInt(offset + 2));
        entity.setType(cursor.getInt(offset + 3));
        entity.setPayTime(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(PaymentRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(PaymentRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(PaymentRecord entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
